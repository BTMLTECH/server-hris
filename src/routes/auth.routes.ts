"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const authController_1 = require("../controllers/authController");
const auth_middleware_1 = require("../middleware/auth.middleware");
const companyController_1 = require("../controllers/companyController");
const tenantAuth_1 = require("../middleware/tenantAuth");
const uploadHandover_1 = __importDefault(require("../middleware/uploadHandover"));
const router = express_1.default.Router();
router.post('/admin-register', authController_1.registerAdmin);
router.post('/owner-create', companyController_1.createCompanyWithAdmin);
router.post('/login', authController_1.login);
router.post('/verify-2fa', authController_1.verify2FA);
router.post('/refresh', authController_1.refreshAccessToken);
router.post('/request-password', authController_1.requestPassword);
router.post('/resend-password', authController_1.resend2FACode);
router.post('/reset-activation', auth_middleware_1.protect, tenantAuth_1.tenantAuth, auth_middleware_1.allowAdminAndHR, companyController_1.resendActivationLink);
router.post('/send-password', auth_middleware_1.protect, tenantAuth_1.tenantAuth, auth_middleware_1.allowAdminAndHR, authController_1.sendActivationPasswordLink);
router.post('/set-password', authController_1.setupPassword);
router.post('/refresh-token', authController_1.refreshAccessToken);
router.get('/last-staffId', auth_middleware_1.protect, tenantAuth_1.tenantAuth, auth_middleware_1.allowAdminAndHR, authController_1.getNextStaffId);
router.post('/logout', authController_1.logout);
router.post('/invite-user', auth_middleware_1.protect, tenantAuth_1.tenantAuth, auth_middleware_1.allowAdminAndHR, authController_1.inviteUser);
router.post('/bulk-invite', auth_middleware_1.protect, tenantAuth_1.tenantAuth, auth_middleware_1.allowAdminAndHR, uploadHandover_1.default.single('file'), authController_1.bulkImportUsers);
exports.default = router;
